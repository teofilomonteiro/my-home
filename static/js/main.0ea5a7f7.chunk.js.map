{"version":3,"sources":["component/Language.tsx","App.tsx","i18n.ts","index.tsx"],"names":["SUPPORTED_LANGUAGES","Language","useTranslation","t","i18n","history","useHistory","search","useLocation","params","URLSearchParams","useEffect","value","get","push","changeLanguage","useState","setValue","className","onChange","e","target","map","lng","key","App","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","react","useSuspense","interpolation","escapeValue","resources","en","welcome","hello","language","pt","detection","order","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAQMA,G,MAAsB,CAAC,KAAM,OAoCpBC,MAjCf,WAAqB,IAAD,EACIC,YAAe,WAA3BC,EADQ,EACRA,EAAGC,EADK,EACLA,KAELC,EAAUC,cACRC,EAAWC,cAAXD,OAEFE,EAAS,IAAIC,gBAAgBH,GAEnCI,qBAAU,WACFC,IAAUH,EAAOI,IAdK,SAetBR,EAAQS,KAAR,WAfsB,MAetB,YAA8CF,IAC9CR,EAAKW,eAAeH,OAXZ,MAeUI,mBAASP,EAAOI,IApBZ,QADT,MAML,mBAeTD,EAfS,KAeFK,EAfE,KAqBhB,OACI,yBAAKC,UAAU,gBACX,6BAAMf,EAAE,aACR,4BAAQS,MAAOA,EAAOO,SAP9B,SAAsBC,GAClBH,EAASG,EAAEC,OAAOT,SAQNZ,EAAoBsB,KAAI,SAAAC,GAAG,OAAI,4BAAQX,MAAOW,EAAKC,IAAKD,GAAMA,S,MCdnEE,MAhBf,WAAgB,IACNtB,EAAMD,YAAe,WAArBC,EAER,OACE,yBAAKe,UAAU,OACb,kBAAC,EAAD,MAEA,4BAAQA,UAAU,cAEhB,6BAAMf,EAAE,a,wBCPhBC,IAMKsB,IAAIC,KAEJD,IAAIE,KAGJC,KAAK,CACFC,YAAa,KACbC,OAAO,EACPC,MAAO,CACHC,aAAa,GAEjBC,cAAe,CACXC,aAAa,GAEjBC,UAAW,CACPC,GAAI,CACAC,QAAS,CACLC,MAAO,sCACPC,SAAU,oBAGlBC,GAAI,CACAH,QAAS,CACLC,MAAO,wDACPC,SAAU,2BAItBE,UAAW,CACPC,MAAO,CAAC,cAAe,OAAQ,SAAU,eAAgB,iBAAkB,UAAW,YAAa,gBAKhGvC,EAAf,ECxCAwC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.0ea5a7f7.chunk.js","sourcesContent":["import React, { useState, useEffect, ChangeEvent } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport './Language.css';\n\nconst DEFAULT_LANGUAGE = \"en\";\nconst SEARCH_PARAMETER_LANGUAGE = \"lng\";\n\nconst SUPPORTED_LANGUAGES = [\"en\", \"pt\"];\n\n\nfunction Language() {\n    const { t, i18n } = useTranslation(\"welcome\");\n\n    const history = useHistory();\n    const { search } = useLocation();\n\n    const params = new URLSearchParams(search);\n\n    useEffect(() => {\n        if (value !== params.get(SEARCH_PARAMETER_LANGUAGE)) {\n            history.push(`?${SEARCH_PARAMETER_LANGUAGE}=${value}`);\n            i18n.changeLanguage(value);\n        }\n    });\n\n    const [value, setValue] = useState(params.get(SEARCH_PARAMETER_LANGUAGE) || DEFAULT_LANGUAGE);\n\n    function handleSelect(e: ChangeEvent<HTMLSelectElement>) {\n        setValue(e.target.value);\n    }\n\n    return (\n        <div className=\"App-language\">\n            <div>{t('language')}</div>\n            <select value={value} onChange={handleSelect}>\n                {\n                    SUPPORTED_LANGUAGES.map(lng => <option value={lng} key={lng}>{lng}</option>)\n                }\n            </select>\n        </div>\n    );\n}\n\nexport default Language;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Language from './component/Language'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const { t } = useTranslation(\"welcome\");\n\n  return (\n    <div className=\"App\">\n      <Language />\n\n      <header className=\"App-header\">\n\n        <div>{t('hello')}</div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n// import Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// don't want to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\ni18n\n    // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n    // learn more: https://github.com/i18next/i18next-http-backend\n    //   .use(Backend)\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(LanguageDetector)\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        fallbackLng: 'en',\n        debug: false,\n        react: {\n            useSuspense: false\n        },\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n        resources: {\n            en: {\n                welcome: {\n                    hello: \"Hello strange & welcome to my page!\",\n                    language: \"Select language\",\n                }\n            },\n            pt: {\n                welcome: {\n                    hello: \"Olá forasteiro! Sê bem-vindo a minha página!\",\n                    language: \"Seleciona a língua\",\n                }\n            }\n        },\n        detection: {\n            order: ['querystring', 'path', 'cookie', 'localStorage', 'sessionStorage', 'htmlTag', 'subdomain', 'navigator'],\n        }\n    });\n\n\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nimport './i18n';\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}